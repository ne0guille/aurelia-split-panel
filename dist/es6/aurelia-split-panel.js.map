{"version":3,"sources":["../src/aurelia-split-panel.ts"],"names":[],"mappings":";;;;;;;;AAAA,uDAA6E;AAE7E,gCAAkC;AAElC,IAAM,cAAc,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC;AAG1E;IAQE,mCAAoB,OAAgB,EAAU,SAAoB;QAA9C,YAAO,GAAP,OAAO,CAAS;QAAU,cAAS,GAAT,SAAS,CAAW;QANZ,YAAO,GAA2B,GAAG,CAAC;QACtC,eAAU,GAAW,EAAE,CAAC;QACxB,aAAQ,GAAY,KAAK,CAAC;IAIV,CAAC;IAEvE,4CAAQ,GAAR;QACE,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED,4CAAQ,GAAR;QACE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;IAED,yCAAK,GAAL;QAAA,iBAWC;QAVC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC;YAC5B,IAAM,UAAU,GAAG,KAAI,CAAC,aAAa,EAAE,CAAC;YAExC,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC,UAAU,EAAE;gBAC/B,KAAK,EAAE,KAAI,CAAC,KAAK;gBACjB,OAAO,EAAE,KAAI,CAAC,OAAO;gBACrB,UAAU,EAAE,KAAI,CAAC,UAAU;gBAC3B,SAAS,EAAE,KAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,QAAQ,GAAG,cAAc,CAAC,UAAU;aAC/E,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,iDAAa,GAArB;QACE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QAExE,IAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAExD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;YAAC,aAAa,CAAC,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAzC,CAAyC,CAAC,CAAC;QAEhG,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,MAAI,OAAO,CAAC,EAAI,EAAhB,CAAgB,CAAC,CAAC;IACxD,CAAC;IAED,2CAAO,GAAP,UAAQ,KAAoB;QAC1B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IA1CqD;QAArD,4BAAQ,CAAC,EAAE,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAE,CAAC;4DAAsB;IACrB;QAArD,4BAAQ,CAAC,EAAE,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAE,CAAC;8DAAuC;IACtC;QAArD,4BAAQ,CAAC,EAAE,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAE,CAAC;iEAAyB;IACxB;QAArD,4BAAQ,CAAC,EAAE,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAE,CAAC;+DAA2B;IAJrE,yBAAyB;QADrC,0BAAM,CAAC,OAAO,EAAE,6BAAS,CAAC;OACd,yBAAyB,CA4CrC;IAAD,gCAAC;CA5CD,AA4CC,IAAA;AA5CY,8DAAyB","file":"aurelia-split-panel.js","sourcesContent":["import { bindable, bindingMode, TaskQueue, inject } from 'aurelia-framework';\r\n\r\nimport * as Split from 'split.js';\r\n\r\nconst splitDirection = { vertical: 'vertical', horizontal: 'horizontal' };\r\n\r\n@inject(Element, TaskQueue)\r\nexport class SplitPanelCustomAttribute {\r\n  @bindable({ defaultBindingMode: bindingMode.oneWay }) sizes: Array<number>;\r\n  @bindable({ defaultBindingMode: bindingMode.oneWay }) minSize: Array<number> | number = 100;\r\n  @bindable({ defaultBindingMode: bindingMode.oneWay }) gutterSize: number = 10;\r\n  @bindable({ defaultBindingMode: bindingMode.oneWay }) vertical: boolean = false;\r\n\r\n  private splitjs: any;\r\n\r\n  constructor(private element: Element, private taskQueue: TaskQueue) { }\r\n\r\n  attached() {\r\n    this.split();\r\n  }\r\n\r\n  detached() {\r\n    this.splitjs.destroy();\r\n  }\r\n\r\n  split(): void {\r\n    this.taskQueue.queueMicroTask(() => {\r\n      const panelItems = this.getPanelItems();\r\n\r\n      this.splitjs = Split(panelItems, {\r\n        sizes: this.sizes,\r\n        minSize: this.minSize,\r\n        gutterSize: this.gutterSize,\r\n        direction: this.vertical ? splitDirection.vertical : splitDirection.horizontal\r\n      });\r\n    });\r\n  }\r\n\r\n  private getPanelItems(): string[] {\r\n    if (!(this.element.children && this.element.children.length)) return [];\r\n\r\n    const childrenArray = Array.from(this.element.children);\r\n\r\n    if (!this.vertical) childrenArray.forEach(element => element.classList.add('split-horizontal'));\r\n\r\n    return childrenArray.map(element => `#${element.id}`);\r\n  }\r\n\r\n  setSize(sizes: Array<number>): void {\r\n    this.splitjs.setSizes(sizes);\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}