{"version":3,"sources":["../src/split-service.ts"],"names":[],"mappings":";;;;;;;;AAAA,gCAAkC;AAElC,uDAA2C;AAC3C,qEAA2D;AAE3D,qDAA4E;AAW5E;IAGE,sBAAY,EAAE;QACZ,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,CAAC;IAEM,6BAAM,GAAb,UAAc,OAAqB;QACjC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,6BAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IAEM,+BAAQ,GAAf,UAAgB,KAAK;QACnB,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,6BAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC;IAEM,8BAAO,GAAd;QACE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,6BAAW,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAEM,iCAAU,GAAjB,UAAkB,OAAoB,EAAE,OAAqB;QAC3D,IAAM,UAAU,GAAG,OAAO,CAAC,SAAS,KAAK,gCAAc,CAAC,QAAQ,CAAC;QACjE,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QAC3D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QAE1C,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC;IAEO,oCAAa,GAArB,UAAsB,OAAoB,EAAE,UAAmB;QAC7D,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QAE9D,IAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAM,eAAe,GAAG,UAAU,GAAG,4BAAU,CAAC,QAAQ,GAAG,4BAAU,CAAC,UAAU,CAAC;QAEjF,aAAa,CAAC,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,EAAtC,CAAsC,CAAC,CAAC;QAEzE,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,MAAI,OAAO,CAAC,EAAI,EAAhB,CAAgB,CAAC,CAAC;IACxD,CAAC;IAEO,sCAAe,GAAvB,UAAwB,OAAoB,EAAE,UAAmB;QAC/D,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,IAAI,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAClE,IAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;YAC5D,IAAM,MAAM,GAAG,YAAY,KAAK,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC;YAEhG,OAAO,CAAC,KAAK,CAAC,MAAM,GAAM,MAAM,OAAI,CAAC;QACvC,CAAC;IACH,CAAC;IAEO,uCAAgB,GAAxB,UAAyB,OAAO;QAC9B,MAAM,CAAC,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,YAAY,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACpG,CAAC;IAjDU,YAAY;QADxB,0BAAM,CAAC,0CAAe,CAAC;OACX,YAAY,CAkDxB;IAAD,mBAAC;CAlDD,AAkDC,IAAA;AAlDY,oCAAY","file":"split-service.js","sourcesContent":["import * as Split from 'split.js';\r\n\r\nimport { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\n\r\nimport { splitClass, splitEvents, splitDirection } from './split-constants';\r\n\r\nexport interface SplitOptions {\r\n  sizes: Array<number>;\r\n  minSize: Array<number> | number;\r\n  gutterSize: number;\r\n  direction: string;\r\n  cursor: string;\r\n}\r\n\r\n@inject(EventAggregator)\r\nexport class SplitService {\r\n  ea: EventAggregator;\r\n\r\n  constructor(ea) {\r\n    this.ea = ea;\r\n  }\r\n\r\n  public create(options: SplitOptions) {\r\n    this.ea.publish(splitEvents.create, options);\r\n  }\r\n\r\n  public setSizes(sizes) {\r\n    this.ea.publish(splitEvents.setSize, sizes);\r\n  }\r\n\r\n  public destroy() {\r\n    this.ea.publish(splitEvents.destroy);\r\n  }\r\n\r\n  public initialize(element: HTMLElement, options: SplitOptions) {\r\n    const isVertical = options.direction === splitDirection.vertical;\r\n    const panelItems = this.getPanelItems(element, isVertical);\r\n    this.setParentHeight(element, isVertical);\r\n\r\n    return Split(panelItems, options);\r\n  }\r\n\r\n  private getPanelItems(element: HTMLElement, isVertical: boolean): string[] {\r\n    if (!(element.children && element.children.length)) return [];\r\n\r\n    const childrenArray = Array.from(element.children);\r\n    const splitPanelClass = isVertical ? splitClass.vertical : splitClass.horizontal;\r\n    \r\n    childrenArray.forEach(element => element.classList.add(splitPanelClass));\r\n\r\n    return childrenArray.map(element => `#${element.id}`);\r\n  }\r\n\r\n  private setParentHeight(element: HTMLElement, isVertical: boolean): void {\r\n    if (!(isVertical && element.style.height && element.clientHeight)) {\r\n      const parentHeight = String(this.getElementHeight(element));\r\n      const height = parentHeight === '0' ? this.getElementHeight(element.children[0]) : parentHeight;\r\n\r\n      element.style.height = `${height}px`;\r\n    }\r\n  }\r\n\r\n  private getElementHeight(element): number {\r\n    return element.clientHeight || element.offsetHeight || Number.parseInt(element.style.height) || 0;\r\n  }\r\n}"],"sourceRoot":"/source/"}